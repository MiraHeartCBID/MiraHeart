!pip install pyserial
!pip install scipy
!pip install sklearn
!pip install pandas
import pandas as pd
import sklearn 
from sklearn import preprocessing
import scipy
import serial,time,csv,os
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import cm
from itertools import zip_longest

plt.style.use('ggplot')

## initialize serial port (ttyUSB0 or ttyACM0) at 115200 baud rate
ser = serial.Serial('/dev/cu.usbmodem2101',
                    baudrate=115200)

## looping through serial prints and wait for restart of Arduino Uno
## with start word "MAX30102"
all_data1 = []  
all_data2 = []  
curr_line = ser.readline() # read line
print(curr_line)
count = 0
for i in range(500):
    if curr_line[0:-2] == b'MAX30102' or curr_line == b'/r/n':
        count = 0
        print("Program Start")
        curr_line = ser.readline()
        count += 1
        continue
        
    curr_line = ser.readline()
    count += 1

    if count%2 == 1:
        all_data1.append(curr_line) # append to data vector1 
    else:
        all_data2.append(curr_line)

# looping through data vector and removing bad data
# then, create vectors for time, red, and IR variables
print("Finished Data Collection")
t_vec1,ir_vec1,red_vec1 = [],[],[]
ir_prev1,red_prev1 = 0.0,0.0
for ii in range(3,len(all_data1)):
    try:
        curr_data1 = (all_data1[ii][0:-2]).decode("utf-8").split(',')
    except:
        continue
    
    if len(curr_data1)==3:

        if abs((float(curr_data1[1])-ir_prev1)/float(curr_data1[1]))>1.01 or\
        abs((float(curr_data1[2])-red_prev1)/float(curr_data1[2]))>1.01:
            continue
        
        t_vec1.append(float(curr_data1[0])/1000000.0)
        ir_vec1.append(float(curr_data1[1]))
        red_vec1.append(float(curr_data1[2]))
        ir_prev1 = float(curr_data1[1])
        red_prev1 = float(curr_data1[2])
        
smoothing_size = 20 
red_vals1 = np.convolve(red_vec1,np.ones((smoothing_size,)),'same')/smoothing_size
red_grad1 = np.gradient(red_vals1,t_vec1)
red_grad1[0:int(smoothing_size/2)+1] = np.zeros((int(smoothing_size/2)+1,))
red_grad1[-int(smoothing_size/2)-1:] = np.zeros((int(smoothing_size/2)+1,))  
red_vals1 = np.append(np.repeat(red_vals1[int(smoothing_size/2)],int(smoothing_size/2)),red_vals1[int(smoothing_size/2):-int(smoothing_size/2)])
red_vals1 = np.append(red_vals1,np.repeat(red_vals1[-int(smoothing_size/2)],int(smoothing_size/2)))
red_vals_normalize1 = sklearn.preprocessing.normalize([red_vals1])


samplingrate = 1.0/np.mean(np.abs(np.diff(t_vec1)))
print('Sample Rate: {0:2.1f}Hz'.format(1.0/np.mean(np.abs(np.diff(t_vec1)))))


#finding peaks
peaks1, props1 = scipy.signal.find_peaks(red_vals1, distance=0.75*samplingrate, height=0.0)
print(peaks1)

t_peaks1 = []
for peakind1 in peaks1:
    t_peaks1.append(t_vec1[peakind1])
            
#New sensor
t_vec2,ir_vec2,red_vec2 = [],[],[]
ir_prev2,red_prev2 = 0.0,0.0
for ii in range(3,len(all_data2)):
    try:
        curr_data2 = (all_data2[ii][0:-2]).decode("utf-8").split(',')
    except:
        continue
    
    if len(curr_data2)==3:

        if abs((float(curr_data2[1])-ir_prev2)/float(curr_data2[1]))>1.01 or\
        abs((float(curr_data2[2])-red_prev2)/float(curr_data2[2]))>1.01:
            continue
        
        t_vec2.append(float(curr_data2[0])/1000000.0)
        ir_vec2.append(float(curr_data2[1]))
        red_vec2.append(float(curr_data2[2]))
        ir_prev2 = float(curr_data2[1])
        red_prev2 = float(curr_data2[2])
        
#print(red_vec2)
smoothing_size = 20 
new = np.ones((smoothing_size,))
red_vals2 = np.convolve(red_vec2,new,'same')/smoothing_size
red_grad2 = np.gradient(red_vals2,t_vec2)
red_grad2[0:int(smoothing_size/2)+1] = np.zeros((int(smoothing_size/2)+1,))
red_grad2[-int(smoothing_size/2)-1:] = np.zeros((int(smoothing_size/2)+1,))  

red_vals2 = np.append(np.repeat(red_vals2[int(smoothing_size/2)],int(smoothing_size/2)),red_vals2[int(smoothing_size/2):-int(smoothing_size/2)])
red_vals2 = np.append(red_vals2,np.repeat(red_vals2[-int(smoothing_size/2)],int(smoothing_size/2)))
red_vals_normalize2 = sklearn.preprocessing.normalize([red_vals2])

samplingrate = 1.0/np.mean(np.abs(np.diff(t_vec2)))
print('Sample Rate: {0:2.1f}Hz'.format(1.0/np.mean(np.abs(np.diff(t_vec2)))))

#finding peaks
peaks2, props2 = scipy.signal.find_peaks(red_vals2, distance=0.75*samplingrate, height=0.0)
print(peaks2)

t_peaks2 = []
for peakind2 in peaks2:
    t_peaks2.append(t_vec2[peakind2])
  
t_vec_peaks1 = []
red_vec_peaks1 = []
for i in t_peaks1:
    t_vec_peaks1.append(t_vec1[int(i)])
    red_vec_peaks1.append(red_vec1[int(i)])
    
t_vec_peaks2 = []
red_vec_peaks2 = []
for i in t_peaks2:
    t_vec_peaks2.append(t_vec2[int(i)])
    red_vec_peaks2.append(red_vec2[int(i)])
    
#calculating pulse wave velocity
x = .02692 
maximum1 = max(red_vec_peaks1)
maximum2 = max(red_vec_peaks2)
max_index1 = red_vec_peaks1.index(maximum1)
max_index2 = red_vec_peaks2.index(maximum2)
transit_time = abs(t_vec_peaks1[max_index1] - t_vec_peaks2[max_index2])
pulse_wave_velocity = x/transit_time
print(t_vec_peaks1,"t_vec_peaks1")
print(t_vec_peaks2, "t_vec_peaks2")
print(red_vec_peaks1, "red_vec_peaks1")
print(red_vec_peaks2, "red_vec_peaks2")
print(transit_time, "s")
print(pulse_wave_velocity,"m/s")


#saving to csv
d = [t_vec1, red_vec1, t_vec_peaks1, red_vec_peaks1, t_vec2, red_vec2, t_vec_peaks2, red_vec_peaks2]
with open(r'01_23_23_arterial.csv',"a") as f:
    writer = csv.writer(f)
    for values in zip_longest(*d):
        writer.writerow(values)        
        

## plotting data vectors 
plt.figure(figsize=(12,8))
plt.plot(t_vec1,red_vec1,label='Red',color='#37A490',linewidth=1)
plt.plot(t_vec1,red_vals1,label = 'Smoothed Red', color ='#CE445D',linewidth=1)
plt.plot(t_peaks1,red_vals1[peaks1], "x")
plt.figure()
plt.plot(t_vec1,red_vals_normalize1[0,:],label = 'Smoothed Red', color ='#CE445D',linewidth=1)
plt.xlim([t_vec1[0],t_vec1[-1]])
plt.tight_layout(pad=1.2)
plt.show()

plt.figure(figsize=(12,8))
plt.plot(t_vec2,red_vec2,label='Red',color='#37A490',linewidth=1)
plt.plot(t_vec2,red_vals2,label = 'Smoothed Red', color ='#CE445D',linewidth=1)
plt.plot(t_peaks2,red_vals2[peaks2], "x")
plt.figure()
plt.plot(t_vec2,red_vals_normalize2[0,:],label = 'Smoothed Red', color ='#CE445D',linewidth=1)
plt.xlim([t_vec2[0],t_vec2[-1]])
plt.tight_layout(pad=1.2)
plt.show()

